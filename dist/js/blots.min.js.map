{
  "version": 3,
  "sources": ["../../src/dom.js", "../../src/event.js", "../../src/router.js", "../../src/state.js", "../../src/template.js"],
  "sourcesContent": ["export function addEvent(event, target, action) {\n  document.querySelectorAll(`[${target}]`).forEach(el => {\n    el.addEventListener(event, action)\n  })\n}\n\nexport const click = (target, action) => addEvent('click', target, action)\nexport const change = (target, action) => addEvent('change', target, action)\nexport const inputChange = (target, action) => addEvent('input', target, action)", "export function emit(name, data) {\n  const event = new CustomEvent(name, { detail: data });\n  document.dispatchEvent(event);\n}\n\nexport function output(name, callback) {\n  document.addEventListener(name, callback)\n}", "export class Router {\n  constructor() {\n    this.routes = [];\n\n    window.addEventListener('popstate', () => this.resolve());\n    this.setDataLink();\n  }\n\n  add(path, callback) {\n    this.routes.push({ path, callback });\n  }\n\n  navigate(path) {\n    history.pushState({}, '', path);\n    document.querySelector('app').innerHTML = ''\n    this.resolve();\n  }\n\n  setDataLink() {\n    document.querySelectorAll('a[data-link]').forEach(el => {\n      el.addEventListener('click', (e) => {\n        e.preventDefault();\n        const target = e.currentTarget.getAttribute('href');\n        if (target) this.navigate(target);\n      });\n    });\n  }\n\n  resolve() {\n    const currentPath = window.location.pathname;\n    const query = this.parseQueryParams(window.location.search);\n    for (const route of this.routes) {\n      const match = this.matchPath(route.path, currentPath);\n      if (match) {\n        route.callback(match, query);\n        return;\n      }\n    }\n    console.warn('No route matched:', currentPath);\n  }\n\n  matchPath(routePath, currentPath) {\n    const routeParts = routePath.split('/').filter(Boolean);\n    const pathParts = currentPath.split('/').filter(Boolean);\n\n    if (routeParts.length !== pathParts.length) return null;\n\n    const params = {};\n\n    for (let i = 0; i < routeParts.length; i++) {\n      const routePart = routeParts[i];\n      const pathPart = pathParts[i];\n\n      if (routePart.startsWith(':')) {\n        params[routePart.substring(1)] = decodeURIComponent(pathPart);\n      } else if (routePart !== pathPart) {\n        return null;\n      }\n    }\n\n    return params;\n  }\n\n  parseQueryParams(search) {\n    const query = {};\n    const params = new URLSearchParams(search);\n    params.forEach((value, key) => {\n      query[key] = value;\n    });\n    return query;\n  }\n}\n", "export function state(obj, onChange) {\n  return new Proxy(obj, {\n    set(target, prop, value) {\n      target[prop] = value;\n      if (typeof onChange === \"function\") onChange({ prop, value, target });\n      return true;\n    },\n  });\n}\n\nexport function observable() {\n  const observers = new Set();\n  return {\n    subscribe: (observer) => observers.add(observer),\n    unsubscribe: (observer) => observers.delete(observer),\n    notify: (data) => observers.forEach((observer) => observer(data)),\n  };\n}\n", "// import Mustache from \"mustache\";\n\nexport function createElement(html) {\n  const template = document.createElement(\"template\");\n  template.innerHTML = (html || \"\").trim();\n  return template.content.firstElementChild;\n}\n\n// export function draw(target, html, data = {}) {\n//   const rendered = Mustache.render(html, data);\n//   const el = blots.createElement(rendered);\n//   const $target = $(target);\n//   $target.empty();\n//   if (el) $target.append(el);\n// }\n\nexport async function template(fileName) {\n  \n}\n"],
  "mappings": "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",
  "names": ["addEvent", "event", "target", "action", "el", "click", "change", "inputChange", "emit", "name", "data", "event", "output", "callback", "Router", "path", "callback", "el", "target", "currentPath", "query", "route", "match", "routePath", "routeParts", "pathParts", "params", "routePart", "pathPart", "search", "value", "key", "state", "obj", "onChange", "target", "prop", "value", "observable", "observers", "observer", "data", "createElement", "html", "template", "fileName", "__async"]
}
